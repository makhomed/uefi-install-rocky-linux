#!/usr/bin/python3 -u

""" Install Rocky Linux from a local block device in UEFI mode
"""

__contact__ = 'https://github.com/makhomed/uefi-install-rocky-linux'
__license__ = 'GNU General Public License v3.0 or later'
__version__ = '1.3.0'


"""

Changes with uefi-install-rocky-linux 1.3.0                17 Mar 2025

    *) Improved configuration file selection logic.


Changes with uefi-install-rocky-linux 1.2.1                07 Mar 2025

    *) Improved disk list formatting on summary screen.


Changes with uefi-install-rocky-linux 1.2.0                03 Mar 2025

    *) Read config from uefi-install-rocky-linux.toml file.


Changes with uefi-install-rocky-linux 1.1.0                24 Feb 2025

    *) Only /dev/disk/by-id/ static disk names can be used.

    *) Use blkdiscard only for SSD, for HDD it is useless.

    *) Extra linux kernel cmdline arguments can be added.


Changes with uefi-install-rocky-linux 1.0.0                14 Dec 2024

    *) The first public version.

"""

import configparser
import json
import os
import shutil
import subprocess
import sys
import urllib.parse
import urllib.request
import urllib.error

from pathlib import Path

if sys.version_info >= (3, 11): import tomllib
else: import tomli as tomllib


class style:
    """ https://gist.github.com/JBlond/2fea43a3049b38287e5e9cefc87b2124
    """
    RED = '\033[1;91m'
    GREEN = '\033[1;92m'
    YELLOW = '\033[1;93m'
    WHITE = '\033[1;97m'
    PURPLE = '\033[1;35m'
    CYAN = '\033[1;36m'
    RESET = '\033[0m'

def clear_screen():
    print('\033c', end='')

def info(*args):
    command = ' '.join([ str(arg) for arg in args])
    print(f'{style.WHITE}{command}{style.RESET}', file=sys.stderr, flush=True)

def good(*args):
    command = ' '.join([ str(arg) for arg in args])
    print(f'{style.GREEN}{command}{style.RESET}', file=sys.stderr, flush=True)

def warn(*args):
    command = ' '.join([ str(arg) for arg in args])
    print(f'{style.YELLOW}{command}{style.RESET}', file=sys.stderr, flush=True)

def error(*args):
    command = ' '.join([ str(arg) for arg in args])
    print(f'{style.RED}{command}{style.RESET}', file=sys.stderr, flush=True)

def fatal(*args, show_usage=False):
    command = ' '.join([ str(arg) for arg in args])
    print(f'{style.RED}{command}{style.RESET}', file=sys.stderr, flush=True)
    if show_usage:
        usage()
    sys.exit(1)

def run(*args, **kwargs):
    if kwargs.get('echo', True):
        command = ' '.join([ str(arg) for arg in args])
        print(f'\n{style.CYAN}{command}{style.RESET}\n')
    completed_process = subprocess.run(args, capture_output=kwargs.get('capture_output', True), check=kwargs.get('check', True), encoding='utf-8', errors='strict')
    return completed_process

def disk_short_name(disk):
    return Path(disk).resolve(strict=True).name

def is_rotational_disk(disk):
    return int(Path(f'/sys/block/{disk_short_name(disk)}/queue/rotational').read_text()) == 1

### check for prerequisites

clear_screen()

if os.geteuid() != 0 or os.getegid() != 0:
    script_basename = Path(sys.argv[0]).name
    script_filename = f'this script ({Path(sys.argv[0]).name})' if script_basename else 'this script'
    fatal(f'\n{script_filename} must be started with root privileges\n')

### read configuration

def usage():
    print()
    print('usage:')
    print()
    print(f'\t{sys.argv[0]} [argument]')
    print()
    print('argument is configuration file name')
    print()

def read_text_from_file(arg):
    arg = arg.strip()
    path = Path(arg)
    if not path.is_symlink() and path.is_file():
        return path.read_text()
    else:
        if not path.exists():
            fatal(f'\n{arg} does not exists\n')
        else:
            fatal(f'\n{arg} exists, but it is not a file\n')

def read_configuration():
    args = sys.argv[1:]
    arg = None
    config_content = None
    config_location = None
    if len(args) > 1:
        fatal('only one argument expected', show_usage=True)
    if len(args) == 1:
        return read_text_from_file(args[0])
    elif len(args) == 0:
        candidates = list()
        for path in Path.cwd().iterdir():
            if not path.is_symlink() and path.is_file() and path.name.lower().endswith('.toml'):
                candidates.append(str(path))
        if len(candidates) == 1:
            return read_text_from_file(candidates[0])
        elif len(candidates) > 1:
            filenames = [str(Path(path).resolve()) for path in candidates]
            filenames = '\n{0}'.format('\n'.join(filenames))
            filenames = f'{style.WHITE}{filenames}{style.RESET}'
            fatal(f'\nMultiple configuration files found in the current directory: {Path.cwd()}\n{filenames}', show_usage=True)
        else:
            fatal(f'\nConfiguration file not found in the current directory: {Path.cwd()}', show_usage=True)

req_configuration_options = [ 'only_use_blockdevices', 'rocky_linux_version' ]
all_configuration_options = [ 'only_use_blockdevices', 'rocky_linux_version', 'kickstart_url', 'vnc_installation_enabled', 'linux_cmdline_extra' ]
config = tomllib.loads(read_configuration())
for name in all_configuration_options:
    if not name in config:
        if name in req_configuration_options:
            fatal('\n', f'fatal error: {name} must be defined', '\n')
    else:
        globals()[name] = config[name]

### check configuration

if not isinstance(only_use_blockdevices, list):
    fatal('\n', f'fatal error: only_use_blockdevices must be list, not {type(only_use_blockdevices).__name__}', '\n')

for blockdevice in only_use_blockdevices:
    if not blockdevice.startswith('/dev/disk/by-id/'):
        fatal('\n', f'fatal error: block device name {blockdevice} must start with /dev/disk/by-id/', '\n')

for blockdevice in only_use_blockdevices:
    if not Path(blockdevice).is_block_device():
        fatal('\n', f'fatal error: block device {blockdevice} not exists', '\n')

disk_name_to_dev_disk_by_id_name = dict()
for blockdevice in only_use_blockdevices:
    disk_name_to_dev_disk_by_id_name[disk_short_name(blockdevice)] = blockdevice

if not isinstance(rocky_linux_version, int):
    fatal('\n', f'fatal error: rocky_linux_version must be int, not {type(rocky_linux_version).__name__}', '\n')

if not rocky_linux_version >= 8:
    fatal('\n', f'fatal error:\n\nrocky_linux_version == {rocky_linux_version}\n\nrocky_linux_version must be >= 8', '\n')

rocky_linux_version_url = f'https://download.rockylinux.org/pub/rocky/{rocky_linux_version}/'
completed_process = run('curl', '--silent', '--show-error', '--include', rocky_linux_version_url, echo=False)
stdout = completed_process.stdout.strip()
stderr = completed_process.stderr.strip()
returncode = completed_process.returncode
if returncode != 0:
    clear_screen()
    info(f'\ncurl {rocky_linux_version_url}\n')
    warn(stderr,'\n')
    fatal(f'fatal error: expected 200 status, got curl return code {returncode}\n')
if stderr:
    clear_screen()
    info(f'\ncurl {rocky_linux_version_url}\n', echo=False)
    warn(stderr,'\n')
    fatal(f'fatal error: unexpected error message\n')
assert stdout != '' and stderr == ''
status_line = stdout.splitlines()[0].strip()
assert status_line.upper().startswith('HTTP/')
status = int(status_line.split()[1])
if status != 200:
    clear_screen()
    info(f'\ncurl {rocky_linux_version_url}\n')
    warn(stdout.split('\n\n', maxsplit=1)[0],'\n')
    fatal(f'fatal error: expected 200 http status, got {status} http status\n\n\tRocky Linux {rocky_linux_version} not exists yet\n')

unattended_installation_enabled = 'kickstart_url' in globals() and kickstart_url
vnc_installation_enabled = 'vnc_installation_enabled' in globals() and vnc_installation_enabled
if not unattended_installation_enabled and not vnc_installation_enabled:
    fatal('\nfatal error: must be enabled at least one of two modes:\n\n'
          '\t    unattended installation mode (via kickstart file)\n'
          '\tor interactive installation mode (via VNC connection)\n\n'
          'or both these installation modes simultaneously - in this case you will be able to connect to the target system\n'
          'using your VNC viewer and monitor the installation progress, partially/completely automated via kickstart file.\n')

if unattended_installation_enabled and (kickstart_url.lower().startswith('https://') or kickstart_url.lower().startswith('http://')):
    completed_process = run('curl', '--silent', '--show-error', '--include', kickstart_url, check=False, echo=False)
    stdout = completed_process.stdout.strip()
    stderr = completed_process.stderr.strip()
    returncode = completed_process.returncode
    if returncode != 0:
        clear_screen()
        info(f'\ncurl {kickstart_url}\n')
        warn(stderr,'\n')
        fatal(f'fatal error: expected 200 status, got curl return code {returncode}\n')
    if stderr:
        clear_screen()
        info(f'\ncurl {kickstart_url}\n')
        warn(stderr,'\n')
        fatal(f'fatal error: unexpected error message\n')
    assert stdout != '' and stderr == ''
    status_line = stdout.splitlines()[0].strip()
    assert status_line.upper().startswith('HTTP/')
    status = int(status_line.split()[1])
    if status != 200:
        clear_screen()
        info(f'\ncurl {kickstart_url}\n')
        warn(stdout.split('\n\n', maxsplit=1)[0],'\n')
        fatal(f'fatal error: expected 200 http status, got {status} http status\n')

### check what used blockdevices not contain any partitions

blockdevices = json.loads(run('lsblk', '--json', echo=False).stdout.strip())['blockdevices']
for blockdevice in blockdevices:
    if blockdevice['name'] in disk_name_to_dev_disk_by_id_name:
        blockdevice['/dev/disk/by-id/ name'] = disk_name_to_dev_disk_by_id_name[blockdevice['name']]
blockdevices = [ blockdevice for blockdevice in blockdevices if '/dev/disk/by-id/ name' in blockdevice 
                                            and blockdevice['/dev/disk/by-id/ name'] in only_use_blockdevices ]
not_empty_blockdevices = [ blockdevice['/dev/disk/by-id/ name'] for blockdevice in blockdevices if 'children' in blockdevice ]
if not_empty_blockdevices: 
    for blockdevice in not_empty_blockdevices:
        warn(run('lsblk', blockdevice).stdout.strip())
    name = 'block devices' if len(not_empty_blockdevices) > 1 else 'block device'
    value = ' '.join(not_empty_blockdevices)
    fatal(f'\nfatal error: {name} {value} not empty\n')

### download required files from https://download.rockylinux.org/pub/rocky/

media_repo_file = Path(f'/root/temp-files/rocky-linux-{rocky_linux_version}-media.repo')
temp_files_base = Path(f'/root/temp-files/rocky-linux-{rocky_linux_version}')
destination_dir = temp_files_base / 'EFI/BOOT'
temp_mount_base = Path(f'/root/temp-mount/rocky-linux-{rocky_linux_version}')

temp_files_base.mkdir(parents=True, exist_ok=True)
destination_dir.mkdir(parents=True, exist_ok=True)
temp_mount_base.mkdir(parents=True, exist_ok=True)

def wget(url, filename=None):
    basename = Path(urllib.parse.urlparse(url).path).name
    filename = destination_dir / basename if filename is None else destination_dir / filename
    info(f'\ndownload {url}\nto {filename}')
    args = ['curl', '--progress-meter', '--location', '--remote-time', '--output', str(filename), url]
    run(*args, capture_output=False)

wget(f'https://download.rockylinux.org/pub/rocky/{rocky_linux_version}/BaseOS/x86_64/kickstart/images/pxeboot/vmlinuz')
wget(f'https://download.rockylinux.org/pub/rocky/{rocky_linux_version}/BaseOS/x86_64/kickstart/images/pxeboot/initrd.img')
wget(f'https://download.rockylinux.org/pub/rocky/{rocky_linux_version}/BaseOS/x86_64/kickstart/EFI/BOOT/BOOTX64.EFI')
wget(f'https://download.rockylinux.org/pub/rocky/{rocky_linux_version}/BaseOS/x86_64/kickstart/EFI/BOOT/grubx64.efi')
wget(f'https://download.rockylinux.org/pub/rocky/{rocky_linux_version}/BaseOS/x86_64/kickstart/EFI/BOOT/mmx64.efi')
wget(f'https://download.rockylinux.org/pub/rocky/{rocky_linux_version}/BaseOS/x86_64/kickstart/media.repo', media_repo_file)

### generate grub.conf

media_repo_config = configparser.ConfigParser()
media_repo_config.read(media_repo_file)
rocky_linux_name_minor_major_version = media_repo_config['InstallMedia']['name']

if unattended_installation_enabled:
    inst_ks = f'inst.ks={kickstart_url}'
else:
    inst_ks = ''

if vnc_installation_enabled:
    vnc_password = run('pwgen', '-s', '8', '1', echo=False).stdout.strip()
    inst_vnc = f'inst.resolution=1280x1024 inst.vnc inst.vncpassword={vnc_password}'
else:
    inst_vnc = ''

if 'linux_cmdline_extra' in globals() and isinstance(linux_cmdline_extra, str):
    inst_extra = linux_cmdline_extra
else:
    inst_extra = ''

grub_cfg_content = f"""
set default=0
set timeout=1
menuentry "UEFI install {rocky_linux_name_minor_major_version}" {{
    linux /EFI/BOOT/vmlinuz {inst_ks} inst.xtimeout=7200 inst.nosave=all inst.selinux=0 selinux=0 transparent_hugepage=never {inst_vnc} {inst_extra}
    initrd /EFI/BOOT/initrd.img
}}\n
"""
grub_cfg_filename = destination_dir / 'grub.cfg'
Path(grub_cfg_filename).write_text(grub_cfg_content, encoding='utf-8', errors='strict')

### delete old label only from used blockdevices

print()
for blockdevice in only_use_blockdevices:
    print(
        f' {style.WHITE + "/dev/" + disk_short_name(blockdevice) + style.RESET }'
        f' {style.RED + "HDD" + style.RESET if is_rotational_disk(blockdevice) else style.GREEN + "SSD" + style.RESET}'
        f' {blockdevice}'
        )
print()

for blockdevice in only_use_blockdevices:
    run('wipefs', '--all', '--force', blockdevice)
    if not is_rotational_disk(blockdevice):
        run('blkdiscard', '--force', blockdevice)

### create GPT label and EFI System Partitions

for blockdevice in only_use_blockdevices:
    run('partprobe', echo=False)
    run('parted', '--script', blockdevice, 'mklabel', 'gpt')
    run('partprobe', echo=False)
    run('parted', '--script', blockdevice, 'mkpart', '"EFI System Partition"', 'fat32', '1MiB', '4097MiB')
    run('partprobe', echo=False)
    run('parted', '--script', blockdevice, 'set', '1', 'esp', 'on')
    run('partprobe', echo=False)
    run('mkfs.fat', '-F32', f'{blockdevice}-part1')
    run('partprobe', echo=False)

### copy boot files to EFI System Partitions

for blockdevice in only_use_blockdevices:
    partition1 = f'{blockdevice}-part1'
    mountpoint = temp_mount_base / partition1[1:]
    Path(mountpoint).mkdir(parents=True, exist_ok=True)
    run('mount', '-o', 'defaults,discard,noatime,fmask=0177,dmask=0077,shortname=winnt', partition1, mountpoint)
    shutil.copytree(temp_files_base, mountpoint, dirs_exist_ok=True)
    run('umount', partition1)

### print summary info and reboot

clear_screen()

info()
info(f'Install {rocky_linux_name_minor_major_version}')
info()
info('UEFI boot from:\n\n\t{0}{1}'.format(style.CYAN, "\n\t".join(only_use_blockdevices)))
if unattended_installation_enabled:
    info()
    info(f'{style.PURPLE}Using kickstart: {kickstart_url}')
if vnc_installation_enabled:
    good()
    good(f'VNC password: {vnc_password}')
    info()
    info('IP addresses: {0}'.format(run("hostname", "--all-ip-addresses", echo=False).stdout.strip()))
else:
    warn()
    warn(f'VNC connection: disabled')
info()
input('Press <Enter> to reboot\n\n')
os.execlp('reboot', 'reboot')
